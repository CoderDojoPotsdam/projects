/*imperative program*/void main()
{
    int blickrichtung = 0;
      // speichert die aktuelle Blickrichtung des Hamsters:
      // 0 = Ost , 1 = Nord , 2 = West , 3 = Sued
    int anzahl = anzahlKoerner();
    while (anzahl != 1) 
    {
      if (anzahl % 4 == 0) // durch 4 teilbar
      {
        // nach Osten (0) ausrichten
        ausrichten(blickrichtung, 0);
        blickrichtung = 0;
      }
      else if (anzahl % 3 == 0) // durch 3 teilbar
      {
        // nach Norden (1) ausrichten
        ausrichten(blickrichtung, 1);
        blickrichtung = 1;
      }
      else if (anzahl % 2 == 0) // durch 2 teilbar
      {
        // nach Westen (2) ausrichten
        ausrichten(blickrichtung, 2);
        blickrichtung = 2;
      }
      else 
      {
        // nach Sueden (3) ausrichten
        ausrichten(blickrichtung, 3);
        blickrichtung = 3;
      }
      // entsprechende Anzahl an Feldern vorruecken und auf dem
      // neuen Feld die Koerneranzahl ermitteln
      vor(anzahl);
      anzahl = anzahlKoerner();
    }
    // Hurra! Der Schatz ist gefunden!
    nimm();
}

// liefert die Anzahl an Koernern auf einem Feld 
// (ohne Seiteneffekte)
int anzahlKoerner()
{
    int anzahl = 0;
    while (kornDa())
    {
      nimm();
      anzahl = anzahl + 1;
    }
    int speicher = anzahl;
    // zur Vermeidung von Seiteneffekten!
    while (speicher > 0)
    {
      gib();
      speicher = speicher - 1;
    }
    return anzahl;
}

// "anzahl"-Felder vorruecken
void vor(int anzahl)
{
    while (anzahl > 0)
    {
      vor();
      anzahl = anzahl - 1;
    }
}

// in neue Blickrichtung ausrichten; Kodierung der Blickrichtung:
//   0 = Ost , 1 = Nord , 2 = West , 3 = Sued
// liefert neue Blickrichtung
void ausrichten (int aktuelle_blickrichtung, 
                 int neue_blickrichtung)
{
    if (aktuelle_blickrichtung == 0)
      if (neue_blickrichtung == 0)
        linksUm(0);
      else if (neue_blickrichtung == 1)
        linksUm(1);
      else if (neue_blickrichtung == 2)
        linksUm(2);
      else //if (neue_blickrichtung == 3)
        linksUm(3);
    else if (aktuelle_blickrichtung == 1)
      if (neue_blickrichtung == 0)
        linksUm(3);
      else if (neue_blickrichtung == 1)
        linksUm(0);
      else if (neue_blickrichtung == 2)
        linksUm(1);
      else //if (neue_blickrichtung == 3)
        linksUm(2);
    else if (aktuelle_blickrichtung == 2)
      if (neue_blickrichtung == 0)
        linksUm(2);
      else if (neue_blickrichtung == 1)
        linksUm(3);
      else if (neue_blickrichtung == 2)
        linksUm(0);
      else //if (neue_blickrichtung == 3)
        linksUm(1);
    else //if (aktuelle_blickrichtung == 3)
      if (neue_blickrichtung == 0)
        linksUm(1);
      else if (neue_blickrichtung == 1)
        linksUm(2);
      else if (neue_blickrichtung == 2)
        linksUm(3);
      else //if (neue_blickrichtung == 3)
        linksUm(0);
}

// dreht sich so oft nach links, wie der Parameterwert anzeigt
void linksUm(int anzahl_drehungen)
{
    while (anzahl_drehungen > 0)
    {
      linksUm();
      anzahl_drehungen = anzahl_drehungen - 1;
    }
}