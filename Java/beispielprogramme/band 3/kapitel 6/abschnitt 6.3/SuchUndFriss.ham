/*object-oriented program*//*
 Windows:
 CLASSPATH: .;Programme\beispielprogramme\band 3
 Linux, Solaris:
 CLASSPATH: .:Programme/beispielprogramme/band 3
*/
import util.AllroundHamster;

class Botschaft {

    private int kornReihe;

    private int kornSpalte;

    private boolean kornGefunden;

    boolean fertig;

    Botschaft() {
        this.kornReihe = 0;
        this.kornSpalte = 0;
        this.kornGefunden = false;
        this.fertig = false;
    }

    boolean kornGefunden() {
        return this.kornGefunden;
    }

    void habeKornGefunden(int r, int s) {
        this.kornReihe = r;
        this.kornSpalte = s;
        this.kornGefunden = true;
    }

    int getKornReihe() {
        return this.kornReihe;
    }

    int getKornSpalte() {
        return this.kornSpalte;
    }

    void habeKornGefressen() {
        this.kornGefunden = false;
    }

    boolean sucheBeendet() {
        return this.fertig;
    }

    void beendeSuche() {
        this.fertig = true;
    }
}

class SuchHamster extends AllroundHamster {

    // gemeinsames Objekt
    Botschaft botschaft;

    boolean vonLinksNachRechts;

    SuchHamster(Botschaft botschaft) {
        super(0, 0, Hamster.OST, 0);
        this.botschaft = botschaft;
        this.vonLinksNachRechts = true;
    }

    public void run() {
        this.laufeZurWandUndSuche();
        while (this.weitereReiheExistiert()) {
            this.begibDichInNaechsteReihe();
            this.laufeZurWandUndSuche();
        }
        this.botschaft.beendeSuche();
    }

    void laufeZurWandUndSuche() {
        this.suche();
        while (this.vornFrei()) {
            this.vor();
            this.suche();
        }
    }

    void suche() {
        if (this.kornDa()) {
            this.botschaft.habeKornGefunden(this.getReihe(),
                    this.getSpalte());
        }

        // warten, bis FressHamster das Korn gefressen hat
        while (this.botschaft.kornGefunden()) {
            // aktives Warten
        }
    }

    boolean weitereReiheExistiert() {
        if (this.vonLinksNachRechts) {
            return this.rechtsFrei();
        } else {
            return this.linksFrei();
        }
    }

    void begibDichInNaechsteReihe() {
        if (this.vonLinksNachRechts) {
            this.rechtsUm();
            this.vor();
            this.rechtsUm();
        } else {
            this.linksUm();
            this.vor();
            this.linksUm();
        }
        this.vonLinksNachRechts = !this.vonLinksNachRechts;
    }
}

class FressHamster extends AllroundHamster {

    Botschaft botschaft;

    FressHamster(Botschaft botschaft) {
        super(0, 0, Hamster.OST, 0);
        this.botschaft = botschaft;
    }

    public void run() {
        while (!this.botschaft.fertig) {

            // warten, bis SuchHamster ein Korn gefunden hat
            while (!(this.botschaft.kornGefunden() || this.botschaft
                    .sucheBeendet())) {
                // aktives Warten
            }

            // gefundenes Korn fressen
            if (this.botschaft.kornGefunden()) {
                this.laufeZuKachel(
                        this.botschaft.getKornReihe(),
                        this.botschaft.getKornSpalte());
                this.nimmAlle();
                this.botschaft.habeKornGefressen();
            }
        }
    }
}

void main() {
    Botschaft botschaft = new Botschaft();
    SuchHamster paul = new SuchHamster(botschaft);
    FressHamster heidi = new FressHamster(botschaft);
    paul.start();
    heidi.start();
}