/*class*//*
 Windows:
 CLASSPATH: .;Programme\beispielprogramme\band 3
 Linux, Solaris:
 CLASSPATH: .:Programme/beispielprogramme/band 3
*/
import util.AllroundHamster;

// Hamster, die zwei Koerner gleichzeitig probieren wollen
class ProbierHamster extends AllroundHamster {

    private static ProbierHamster aktHamster = null;

    private Position pos1; // Position des ersten Korns

    private Position pos2; // Position des zweiten Korns

    ProbierHamster(int r, int s, int b, int k, Position pos1,
            Position pos2) {
        super(r, s, b, k);
        this.pos1 = pos1;
        this.pos2 = pos2;
    }

    public void run() {
        // erstes Korn nehmen
        this.laufeZuKachel(this.pos1.getReihe(), this.pos1
                .getSpalte());
        blockiereAlleKoerner(this);
        this.nimm();

        // zweites Korn nehmen
        this.laufeZuKachel(this.pos2.getReihe(), this.pos2
                .getSpalte());
        this.nimm();

        // probieren
        this.schreib("Hmmmm, das schmeckt");

        // erstes Korn ablegen
        this.gib();

        // zweites Korn ablegen
        this.laufeZuKachel(this.pos1.getReihe(), this.pos1
                .getSpalte());
        this.gib();
        gibKoernerBlockadeFrei();
    }

    synchronized static void blockiereAlleKoerner(
            ProbierHamster ham) {
        while (ProbierHamster.aktHamster != null) {
            try {
                ProbierHamster.class.wait();
            } catch (InterruptedException exc) {
            }
        }
        ProbierHamster.aktHamster = ham;
    }

    synchronized static void gibKoernerBlockadeFrei() {
        ProbierHamster.aktHamster = null;
        ProbierHamster.class.notify();
    }

    public synchronized void nimm() {
        if (ProbierHamster.aktHamster == this) {
            super.nimm();
        }
    }

    public synchronized void gib() {
        if (ProbierHamster.aktHamster == this) {
            super.gib();
        }
    }
}