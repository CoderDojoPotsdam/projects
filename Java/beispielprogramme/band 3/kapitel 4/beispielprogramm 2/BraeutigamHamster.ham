/*class*//*
 Windows:
 CLASSPATH: .;Programme\beispielprogramme\band 3
 Linux, Solaris:
 CLASSPATH: .:Programme/beispielprogramme/band 3
 */
import util.AllroundHamster;

class BraeutigamHamster extends AllroundHamster implements
        Beobachteter {

    // Anzahl an Koernern eines Koerner-Hochzeit-Strausses
    final static int KOERNER_STRAUSS = 10;

    // maximale Anzahl an moeglichen Beobachtern
    final static int MAX_BEOBACHTER = 15;

    protected Beobachter[] beobachter;

    BraeutigamHamster(Hamster h) {
        super(h);
        this.beobachter = new Beobachter[MAX_BEOBACHTER];
        for (int b = 0; b < this.beobachter.length; b++) {
            this.beobachter[b] = null;
        }
    }

    public void hinzufuegen(Beobachter obj) {
        for (int b = 0; b < this.beobachter.length; b++) {
            if (this.beobachter[b] == null) {
                this.beobachter[b] = obj;
                return;
            }
        }
    }

    public void run() {
        // sucht 10 Koerner
        this.koernerStraussSammeln();

        // hat nun entweder die naechste Wand erreicht oder
        // genuegend Koerner fuer einen "Brautstrauss" im Maul
        // und benachrichtigt die sich bewerbenden Beobachter
        this.benachrichtigung();

        // nun wartet der Hamster auf die glueckliche Braut!
    }

    void koernerStraussSammeln() {
        // zur Vereinfachung des Sourcecodes reicht auch
        // die aktuell gesammelte Koernerzahl fuer den
        // Brautstrauss,
        // wenn der Hamster die naechste Mauer erreicht
        while (!this.ausreichendGesammelt() && this.vornFrei()) {
            // gesammelt wird in ausreichendGesammelt
            this.vor();
        }
    }

    boolean ausreichendGesammelt() {
        while (this.kornDa()
                && this.getAnzahlKoerner() < KOERNER_STRAUSS) {
            this.nimm();
        }
        return this.getAnzahlKoerner() == KOERNER_STRAUSS;
    }

    void benachrichtigung() {
        // sequentielles Benachrichtigen
        for (int b = 0; b < this.beobachter.length; b++) {
            if (this.beobachter[b] != null) {
                this.beobachter[b].benachrichtigen(this);
            }
        }
    }
}