/*class*/class Bruecke {

    private static Bruecke bruecke = new Bruecke();

    static Bruecke getBruecke() {
        return Bruecke.bruecke;
    }

    int anzahlSchwergewichte;

    int anzahlLeichtgewichte;

    int wartendeSchwergewichte;

    private Bruecke() {
        this.anzahlSchwergewichte = 0;
        this.anzahlLeichtgewichte = 0;
        this.wartendeSchwergewichte = 0;
    }

    // Ein schwergewichtiger Hamster darf nur dann die Brücke
    // betreten, wenn die Anzahl der Schwergewichte
    // und die Anzahl der Leichtgewichte, die sich gerade
    // auf der Brücke befinden, gleich Null ist.
    synchronized void betretenSchwergewicht() {
        if (!(this.anzahlSchwergewichte == 0 && 
                this.anzahlLeichtgewichte == 0)) {
            try {
                this.wartendeSchwergewichte++;
                this.wait();
            } catch (InterruptedException exc) {
            }
        }
        while (!(this.anzahlSchwergewichte == 0 && 
                this.anzahlLeichtgewichte == 0)) {
            try {
                this.wait();
            } catch (InterruptedException exc) {
            }
        }
        this.wartendeSchwergewichte--;
        this.anzahlSchwergewichte++;
    }

    synchronized void verlassenSchwergewicht() {
        this.anzahlSchwergewichte--;
        this.notifyAll();
    }

    // Ein leichtgewichtiger Hamster darf die Brücke nicht
    // betreten, wenn die Anzahl der
    // Schwergewichte, die sich gerade auf der Brücke befinden,
    // größer als Null ist, oder
    // wenn Schwergewichte warten
    synchronized void betretenLeichtgewicht() {
        while (this.anzahlSchwergewichte > 0
                || this.wartendeSchwergewichte > 0) {
            try {
                this.wait();
            } catch (InterruptedException exc) {
            }
        }
        this.anzahlLeichtgewichte++;
    }

    synchronized void verlassenLeichtgewicht() {
        this.anzahlLeichtgewichte--;
        this.notifyAll();
    }

}