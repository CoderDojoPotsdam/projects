/*class*//*
 Windows:
 CLASSPATH: .;Programme\beispielprogramme\band 3
 Linux, Solaris:
 CLASSPATH: .:Programme/beispielprogramme/band 3
*/
import java.util.concurrent.Semaphore;
import util.AllroundHamster;

class ErzeugerHamster extends AllroundHamster {

    private Luecke luecke;

    private Semaphore semMutex;

    private Semaphore semErzeugen;

    private Semaphore semVerbrauchen;

    ErzeugerHamster(int r, int s, int b, int k, Luecke luecke,
            Semaphore semMutex, Semaphore semErzeugen,
            Semaphore semVerbrauchen) {
        super(r, s, b, k);
        this.luecke = luecke;
        this.semMutex = semMutex;
        this.semErzeugen = semErzeugen;
        this.semVerbrauchen = semVerbrauchen;
    }

    public void run() {
        while (true) {
            this.umherlaufen();
            if (!this.maulLeer()) {
                this.zurLueckeLaufen();
                this.kornAblegen();
            }
        }
    }

    private void umherlaufen() {
        int anzahlAktionen = (int) (Math.random() * 15);
        for (int i = 0; i < anzahlAktionen; i++) {
            int blickrichtung = (int) (Math.random() * 4);
            this.setzeBlickrichtung(blickrichtung);
            if (this.vornFrei() && !this.lueckeVorn()) {
                this.vor();
            }
        }
    }

    private void zurLueckeLaufen() {
        this.laufeZuKachel(this.luecke.getReihe(), this.luecke
                .getSpalte() - 1);
        this.setzeBlickrichtung(Hamster.OST);
    }

    private void kornAblegen() {

        // weiteres Korn ablegen
        this.semErzeugen.acquireUninterruptibly();

        // exklusiver Zugang zur Luecke
        this.semMutex.acquireUninterruptibly();

        this.vor();
        if (!this.maulLeer()) {
            this.gib();
        }
        this.kehrt();
        this.vor();

        // exklusiver Zugang aufgehoben
        this.semMutex.release();

        // weiteres Korn kann verbraucht werden
        this.semVerbrauchen.release();
    }

    private boolean lueckeVorn() {
        return this.getBlickrichtung() == Hamster.OST
                && this.getReihe() == this.luecke.getReihe()
                && this.getSpalte() == this.luecke.getSpalte() - 1;
    }
}