/*object-oriented program*/import spiel.Spieler;
import spiel.Spiel;
  
class BeuteHamster
  extends AllroundHamster
  implements Spieler
{

  int spielrunde;
  
  BeuteHamster(Hamster hamster, int runden) {
    super(hamster);
    this.spielrunde = runden;
  }
  
  public boolean spielzug() {
    if (this.spielrunde <= 0) {
      // hat gewonnen, wenn die letzte Spielrunde vorbei ist
      return true;
    }
    this.fluechten();
    this.spielrunde = this.spielrunde - 1;
    return false;
  }
  
  void fluechten() {
    String antwort = 
      this.liesZeichenkette("Wohin (links, rechts, " +
                            "vorne, hinten)?");
    if (antwort.equals("links")) {
      this.linksUm();
      this.vor();
    } else if (antwort.equals("rechts")) {
      this.rechtsUm();
      this.vor();
    } else if (antwort.equals("vorne")) {
      this.vor();
    } else if (antwort.equals("hinten")) {
      this.kehrt();
      this.vor();
    }
  }
}

class RaeuberHamster
  extends AllroundHamster
  implements Spieler
{

  BeuteHamster beute;

  RaeuberHamster(int r, int s, int b, int k) {
    super(r, s, b, k);
    // der RaeuberHamster haelt Ausschau nach einer 
    // Beute im Territorium
    Hamster[] hamster = Territorium.getHamster();
    for (int i=0; i<hamster.length; i++) {
      if (hamster[i] instanceof BeuteHamster) {
        this.beute = (BeuteHamster)hamster[i];
        return;
      }
    }
    this.beute = null;
  }
  
  public boolean spielzug() {
    if (this.beute != null) {
      // der RaeuberHamster darf bei jedem Spielzug zweimal ziehen
      if (this.beuteGefasst()) {
        // kann vorkommen, wenn der BeuteHamster (dummerweise) 
        // auf die Kachel des Raeubers gesprungen ist
        return true;
      }
      
      this.angreifen();
      if (this.beuteGefasst()) {
        return true;
      }
      
      this.angreifen();
      if (this.beuteGefasst()) {
        return true;
      }
    }
    return false;
  }
  
  void angreifen() {
    if (this.getReihe() < this.beute.getReihe()) {
      if (this.getSpalte() < this.beute.getSpalte()) {
        this.gotoKachel(this.getReihe()+1, this.getSpalte()+1);
      } else if (this.getSpalte() > this.beute.getSpalte()) {
        this.gotoKachel(this.getReihe()+1, this.getSpalte()-1);
      } else {
        this.gotoKachel(this.getReihe()+1, this.getSpalte());
      }
    } else if (this.getReihe() > this.beute.getReihe()) {
      if (this.getSpalte() < this.beute.getSpalte()) {
        this.gotoKachel(this.getReihe()-1, this.getSpalte()+1);
      } else if (this.getSpalte() > this.beute.getSpalte()) {
        this.gotoKachel(this.getReihe()-1, this.getSpalte()-1);
      } else {
        this.gotoKachel(this.getReihe()-1, this.getSpalte());
      }
    } else {
      if (this.getSpalte() < this.beute.getSpalte()) {
        this.gotoKachel(this.getReihe(), this.getSpalte()+1);
      } else if (this.getSpalte() > this.beute.getSpalte()) {
        this.gotoKachel(this.getReihe(), this.getSpalte()-1);
      } else {
        // Raeuber und Beute stehen auf derselben Kachel
      }
    }
  }
  
  boolean beuteGefasst() {
    return this.getReihe() == this.beute.getReihe() &&
           this.getSpalte() == this.beute.getSpalte();
  }
}

void main() {
  Hamster paul = Hamster.getStandardHamster();
  int spielrunden = paul.liesZahl("Wie viele Spielrunden?");
  BeuteHamster hase = 
    new BeuteHamster(Hamster.getStandardHamster(), spielrunden);
  RaeuberHamster fuchs = 
    new RaeuberHamster(0, 0, Hamster.OST, 0);
  Spiel spiel = new Spiel(hase, fuchs);
  Spieler sieger = spiel.spielen();
  if (sieger == hase) {
    hase.schreib("Beute hat gewonnen!");
  } else {
    fuchs.schreib("Raeuber hat gewonnen!");
  }
}
